---
import { Icon } from "astro-icon/components";

interface Props {
  items: any[];
  className?: string;
  showArrows?: boolean;
  showPagination?: boolean;
  autoplay?: boolean;
  autoplayDelay?: number;
}

const { 
  items, 
  className = "", 
  showArrows = true, 
  showPagination = true,
  autoplay = true,
  autoplayDelay = 5000
} = Astro.props;
---

<div class={`slider relative w-full overflow-hidden ${className}`}>
  <div class="slider-wrapper flex w-full transition-transform duration-500 ease-in-out">
    <slot />
  </div>

  {showPagination && (
    <div class="pagination flex justify-center mt-4 gap-2"></div>
  )}

  {showArrows && (
    <>
      <button
        class="prev-button hidden sm:flex sm:hover:flex items-center justify-center w-10 h-10 absolute top-1/2 left-2 -translate-y-1/2 z-10 cursor-pointer bg-background/50 backdrop-blur-sm rounded-full border border-tertiary hover:bg-tertiary transition-colors duration-300 max-sm:opacity-70"
        aria-label="Previous slide"
      >
        <Icon name="mdi:chevron-left" class="w-6 h-6" />
      </button>

      <button
        class="next-button hidden sm:flex sm:hover:flex items-center justify-center w-10 h-10 absolute top-1/2 right-2 -translate-y-1/2 z-10 cursor-pointer bg-background/50 backdrop-blur-sm rounded-full border border-tertiary hover:bg-tertiary transition-colors duration-300 max-sm:opacity-70"
        aria-label="Next slide"
      >
        <Icon name="mdi:chevron-right" class="w-6 h-6" />
      </button>
    </>
  )}
</div>

<script define:vars={{ autoplay, autoplayDelay }}>
  document.addEventListener("DOMContentLoaded", () => {
    const slider = document.querySelector(".slider");
    if (!slider) return;

    const sliderWrapper = slider.querySelector(".slider-wrapper");
    const slides = slider.querySelectorAll(".slide");
    const prevButton = slider.querySelector(".prev-button");
    const nextButton = slider.querySelector(".next-button");
    const paginationContainer = slider.querySelector(".pagination");

    if (!sliderWrapper || !slides.length) return;

    // Type assertion for sliderWrapper to access style property
    const sliderWrapperElement = sliderWrapper;

    let currentIndex = 0;
    const totalSlides = slides.length;
    let autoplayTimer = null;
    let isTransitioning = false;
    let touchStartX = 0;
    let touchEndX = 0;

    // Create pagination bullets if pagination container exists
    if (paginationContainer) {
      for (let i = 0; i < totalSlides; i++) {
        const bullet = document.createElement("button");
        bullet.classList.add(
          "pagination-bullet",
          "w-2",
          "h-2",
          "rounded-full",
          "bg-tertiary",
          "hover:bg-primary",
          "transition-all",
          "duration-300"
        );
        bullet.setAttribute("aria-label", `Go to slide ${i + 1}`);
        bullet.dataset.index = i.toString();
        paginationContainer.appendChild(bullet);
      }
    }

    const paginationBullets = slider.querySelectorAll(".pagination-bullet");

    // Set initial active bullet
    if (paginationBullets.length > 0) {
      paginationBullets[0].classList.add("!bg-primary", "w-4");
    }

    // Function to go to a specific slide
    const goToSlide = (index, animate = true) => {
      if (isTransitioning) return;

      // Handle circular navigation
      if (index < 0) index = totalSlides - 1;
      if (index >= totalSlides) index = 0;

      currentIndex = index;

      // Calculate transform value
      const transformValue = `translateX(-${currentIndex * 100}%)`;

      if (!animate) {
        sliderWrapperElement.style.transition = "none";
        sliderWrapperElement.style.transform = transformValue;
        // Force reflow
        sliderWrapperElement.offsetHeight;
        sliderWrapperElement.style.transition = "transform 500ms ease-in-out";
      } else {
        isTransitioning = true;
        sliderWrapperElement.style.transform = transformValue;

        // Reset transitioning state after animation completes
        setTimeout(() => {
          isTransitioning = false;
        }, 500);
      }

      // Update pagination bullets
      paginationBullets.forEach((bullet, i) => {
        if (i === currentIndex) {
          bullet.classList.add("!bg-primary", "w-4");
        } else {
          bullet.classList.remove("!bg-primary", "w-4");
        }
      });

      // Reset autoplay timer if autoplay is enabled
      if (autoplayTimer) {
        clearTimeout(autoplayTimer);
        if (autoplay) {
          startAutoplay();
        }
      }
    };

    // Initialize autoplay if enabled
    const startAutoplay = () => {
      if (autoplay) {
        autoplayTimer = setTimeout(() => {
          goToSlide(currentIndex + 1);
        }, autoplayDelay);
      }
    };

    // Add event listeners for pagination bullets
    paginationBullets.forEach((bullet) => {
      bullet.addEventListener("click", () => {
        const index = parseInt(bullet.dataset.index || "0");
        goToSlide(index);
      });
    });

    // Navigation buttons
    if (prevButton) {
      prevButton.addEventListener("click", () => {
        goToSlide(currentIndex - 1);
      });
    }

    if (nextButton) {
      nextButton.addEventListener("click", () => {
        goToSlide(currentIndex + 1);
      });
    }

    // Touch swiping support
    sliderWrapperElement.addEventListener(
      "touchstart",
      (e) => {
        touchStartX = e.changedTouches[0].screenX;

        // Pause autoplay during touch
        if (autoplayTimer) {
          clearTimeout(autoplayTimer);
        }
      },
      { passive: true }
    );

    sliderWrapperElement.addEventListener(
      "touchend",
      (e) => {
        touchEndX = e.changedTouches[0].screenX;
        handleSwipe();

        // Resume autoplay if enabled
        if (autoplay) {
          startAutoplay();
        }
      },
      { passive: true }
    );

    const handleSwipe = () => {
      const swipeThreshold = 50; // Minimum distance to register a swipe

      if (touchStartX - touchEndX > swipeThreshold) {
        // Swiped left, go to next slide
        goToSlide(currentIndex + 1);
      } else if (touchEndX - touchStartX > swipeThreshold) {
        // Swiped right, go to previous slide
        goToSlide(currentIndex - 1);
      }
    };

    // Add keyboard navigation
    document.addEventListener("keydown", (e) => {
      if (e.key === "ArrowLeft") {
        goToSlide(currentIndex - 1);
      } else if (e.key === "ArrowRight") {
        goToSlide(currentIndex + 1);
      }
    });

    // Start autoplay if enabled
    if (autoplay) {
      startAutoplay();
    }

    // Pause autoplay when hovering over slider
    slider.addEventListener("mouseenter", () => {
      if (autoplayTimer && autoplay) {
        clearTimeout(autoplayTimer);
      }
    });

    // Resume autoplay when mouse leaves
    slider.addEventListener("mouseleave", () => {
      if (autoplay) {
        startAutoplay();
      }
    });

    // Handle visibility change to pause/resume autoplay
    document.addEventListener("visibilitychange", () => {
      if (document.hidden) {
        // Page is hidden, pause autoplay
        if (autoplayTimer) {
          clearTimeout(autoplayTimer);
        }
      } else if (autoplay) {
        // Page is visible, resume autoplay if enabled
        startAutoplay();
      }
    });
  });
</script>
